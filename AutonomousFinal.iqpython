{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nfront_rollers_motor_a = Motor(Ports.PORT1, False)\nfront_rollers_motor_b = Motor(Ports.PORT6, True)\nfront_rollers = MotorGroup(front_rollers_motor_a, front_rollers_motor_b)\nback_roller = Motor(Ports.PORT4, True)\nleft_drive_smart = Motor(Ports.PORT3, 1.0, True)\nright_drive_smart = Motor(Ports.PORT2, 1.0, False)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 200, 173, 76, MM, 1)\ncatapult = Motor(Ports.PORT7, False)\npneumatics = Pneumatic(Ports.PORT8)\ntouchled_10 = Touchled(Ports.PORT10)\n\n\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n    \n# Initialize random seed \ninitializeRandomSeed()\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\ndrivetrain.set_stopping(BRAKE)\nTURN_WAIT_SECONDS = 0.5\n\n# DO NOT TOUCH THIS CODE!!!!!!!!!!!!!!!!!!!!!!!\nclass Robot:\n    def __init__(self, drive_left_velocity=85, drive_right_velocity=100, turn_velocity=40, catapult_velocity=100, front_rollers_velocity=100, back_roller_velocity=100):\n        self.pneumatics_extended = True\n        self.drive_left_velocity = drive_left_velocity\n        self.drive_right_velocity = drive_right_velocity\n        self.turn_velocity = turn_velocity\n        self.catapult_velocity = catapult_velocity\n        self.front_rollers_velocity = front_rollers_velocity\n        self.back_roller_velocity = back_roller_velocity\n        touchled_10.set_color(Color.GREEN)\n        left_drive_smart.set_velocity(self.drive_left_velocity, PERCENT)\n        right_drive_smart.set_velocity(self.drive_right_velocity, PERCENT)\n        drivetrain.set_turn_velocity(self.turn_velocity, PERCENT)\n        catapult.set_velocity(self.catapult_velocity, PERCENT)\n        front_rollers.set_velocity(self.front_rollers_velocity, PERCENT)\n        back_roller.set_velocity(self.back_roller_velocity, PERCENT)\n    \n    def drive_stop(self):\n        drivetrain.stop()\n\n    def drive_fwd(self, seconds, stop_=True):\n        drivetrain.drive(FORWARD)\n        if stop_:\n            wait(seconds, SECONDS)\n            self.drive_stop()\n\n    def drive_rev(self, seconds, stop_=True):\n        drivetrain.drive(REVERSE)\n        wait(seconds, SECONDS)\n        if stop_:\n            self.drive_stop()\n    \n    def turn_right(self, degrees):\n        drivetrain.turn_for(RIGHT, degrees, DEGREES)\n        wait(TURN_WAIT_SECONDS, SECONDS)\n    \n    def turn_left(self, degrees):\n        drivetrain.turn_for(LEFT, degrees, DEGREES)\n        wait(TURN_WAIT_SECONDS, SECONDS)\n\n    def rollers_fwd(self, seconds=0):\n        front_rollers.spin(FORWARD)\n        back_roller.spin(FORWARD)\n        if seconds != 0:\n            wait(seconds, SECONDS)\n            front_rollers.stop()\n            back_roller.stop()\n    \n    def rollers_rev(self, seconds=0):\n        front_rollers.spin(REVERSE)\n        back_roller.spin(REVERSE)\n        if seconds != 0:\n            wait(seconds, SECONDS)\n            front_rollers.stop()\n            back_roller.stop()\n    \n    \n    def rollers_stop(self):\n        front_rollers.stop()\n        back_roller.stop()\n    \n    def catapult_fwd(self, seconds=0):\n        catapult.spin(FORWARD)\n        if seconds != 0:  \n            wait(seconds, SECONDS)\n            catapult.stop()\n        wait(0.5, SECONDS)\n    \n    def catapult_rev(self, seconds=0):\n        catapult.spin(REVERSE)\n        if seconds != 0:\n            wait(seconds, SECONDS)\n            catapult.stop()\n        wait(0.5, SECONDS)\n    \n    def catapult_stop(self):\n        catapult.stop()\n    \n    def extend_pneumatics(self):\n        pneumatics.extend(CYLINDER1)\n        pneumatics.extend(CYLINDER2)\n    \n    def retract_pneumatics(self):\n        pneumatics.retract(CYLINDER1)\n        pneumatics.retract(CYLINDER2)\n    \n    def stop_all(self):\n        self.drive_stop()\n        self.rollers_stop()\n        touchled_10.set_color(Color.RED)\n\ndef main():\n    robot = Robot()\n    robot.extend_pneumatics()\n    robot.rollers_fwd()\n    robot.drive_fwd(1)\n    wait(1, SECONDS)\n    robot.turn_right(87)\n    robot.drive_rev(1.56, False)\n    robot.retract_pneumatics()\n    wait(0.5, SECONDS)\n    robot.extend_pneumatics()\n    robot.catapult_fwd(1.8)\n    robot.rollers_fwd()\n    robot.drive_stop()\n    robot.drive_fwd(1.5)\n    robot.turn_right(30)\n    robot.drive_fwd(1.25)\n    wait(0.35, SECONDS)\n    robot.turn_left(30)\n    robot.drive_rev(2.5, False)\n    robot.retract_pneumatics()\n    wait(0.5, SECONDS)\n    robot.extend_pneumatics()\n    robot.catapult_fwd(3)\n    robot.rollers_fwd()\n    robot.drive_stop()\n    while True:\n        robot.drive_fwd(1.7)\n        wait(1, SECONDS)\n        robot.drive_rev(2.5)\n        robot.retract_pneumatics()\n        wait(1.5, SECONDS)\n        robot.catapult_rev(0.7)\n        wait(1, SECONDS)\n        robot.extend_pneumatics()\n        robot.catapult_fwd(0.7)\n        if touchled_10.pressing():\n            return\n\ntouchled_10.set_color(Color.RED)\ntouchled_10.pressed(main)","textLanguage":"python","robotConfig":[{"port":[1,6],"name":"front_rollers","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[4],"name":"back_roller","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3,2,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"rev","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[7],"name":"catapult","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[8],"name":"pneumatics","customName":true,"deviceType":"Pneumatic","deviceClass":"pneumatic","setting":{"cylinder1":"cylinder1","cylinder2":"cylinder2","cylinder1_reversed":"false","cylinder2_reversed":"false","cylinder3":"","cylinder4":""},"triportSourcePort":22},{"port":[10],"name":"touchled_10","customName":false,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22}],"slot":2,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false}